process PEDESTALS = {

service = MessageLogger {
	untracked vstring destinations = { "insert_logpath/pedetals_insert_pedRuns.log" }
	untracked PSet pedestals_insert_pedRuns.log = { string threshold = "INFO"    
	}
}

# service = Timing { }

#read cabling from db
// untracked bool UsingDb:		[default=true]	switch between using configuration database or xml files
// untracked string User:		[default=""]	username for database account (used if UsingDb=true)
// untracked string Passwd:		[default=""]	password for database account (used if UsingDb=true)
// untracked string Path:		[default=""]	path for database account (used if UsingDb=true)
// untracked string Partition:		[default=""]	partition for database account (used if UsingDb=true)
# es_source SiStripFedCablingBuilderFromDb = SiStripFedCablingBuilderFromDb {
#   untracked    bool UsingDb         = true
#   untracked  string User            = "cms_mtcc_sitracker"
#   untracked  string Passwd          = "cms_mtcc"
#   untracked  string Path            = "OMDS"
#   untracked  string Partition       = "MTCC_TESTCI_NEW"
#   untracked  uint32 MajorVersion    = 0
#   untracked  uint32 MinorVersion    = 0
# }

  es_source FedCablingFromExampleSqliteFile = PoolDBESSource { 
                   VPSet toGet            = { { string record = "SiStripFedCablingRcd" string tag = "test" } }
#                  string connect          = "sqlite_file:/afs/cern.ch/cms/cmt/onlinedev/data/examples/SiStripFedCabling.db"
#        untracked string catalog          = "file:/afs/cern.ch/cms/cmt/onlinedev/data/examples/SiStripFedCabling.xml"
                  string connect          = "sqlite_file:/afs/cern.ch/user/d/dkcira/public/MTCC/Cabling/SiStripFedCabling.db"
        untracked string catalog          = "file:/afs/cern.ch/user/d/dkcira/public/MTCC/Cabling/SiStripFedCabling.xml"
                  string timetype         = "endoftime" 
        untracked uint32 messagelevel     = 3
  }

service = PoolDBOutputService{
	          string connect="sqlite_file:insert_SiStripPedNoisesDB" 
	untracked string catalog="file:insert_SiStripPedNoisesCatalog" 
	          string timetype = "runnumber"    
        untracked bool   loadBlobStreamer = true
  
        untracked uint32 authenticationMethod = 0
        untracked uint32 messagelevel = 3

 	VPSet toPut={
	    	{untracked string containerName = "SiStripPedestals"
             	string tag ="SiStripPedestals_v1"},
            	{untracked string containerName = "SiStripNoises"
             	string tag ="SiStripNoises_v1"}
       }	
}
	
#source = TBRUInputSource
#{
#	untracked vstring fileNames = { insert_input_filenames }
#	untracked int32 maxEvents =-1 //@@ all events
#	#untracked int32 nFeds = 1 # not strictly necessary
#}

  # Input files
    source = NewEventStreamFileReader
    {
      string fileName = SCRIPT_LIST_OF_FILES
      untracked int32 maxEvents = 3000
      int32 max_event_size = 7000000
      int32 max_queue_depth = 5
    }

module RawToDigi = SiStripRawToDigiModule 
{
  string InputModuleLabel = "source"
  untracked int32 AppendedBytes = 0
  untracked int32 FedBufferDumpFreq = 0
  untracked bool  UseFedKey = true #@@ also false seems to be ok
  untracked int32 TriggerFedId = 1023
}

service = DaqMonitorROOTBackEnd {}

module DqmSource = CommissioningSourceMtcc
{
  string InputModuleLabel = "RawToDigi"
  untracked int32 HistoUpdateFreq = 100
  untracked string RootFileName = "Source"
  untracked string CommissioningTask = "PEDESTALS" //@@ not necessary (will over-ride data stream

  untracked string userEnv="me"
  untracked string passwdEnv="me"

  double cutForNoisy = 1.8                              
  double cutForDead = 0.6                            
  double cutForNonGausTails = 0.95                    
}

################# Schedule
path p = { RawToDigi, DqmSource}
}
