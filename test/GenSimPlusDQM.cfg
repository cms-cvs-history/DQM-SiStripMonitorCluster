process GENSIMPLUSDQM = {

  # MessageLogger
  include "FWCore/MessageLogger/data/MessageLogger.cfi"

  # tracer service - very verbose - useful for debugging only
#  service = Tracer { untracked string indention = "$$"}

  # timing
  service = Timing {}

   service = RandomNumberGeneratorService
   {
      untracked uint32 sourceSeed = 135799753
      PSet moduleSeeds =
      {
         untracked uint32 VtxSmeared = 123456789
         untracked uint32 g4SimHits = 9876
      }
   }
   
  include "SimGeneral/HepPDTESSource/data/pdt.cfi"

  #=========================================================================================
  # Step 1 : Event Generation
  # flat random E-gun, single muon
  # this will run single/multi particle pt-gun
  # the pt of the particles with be uniformly
  # distributed in the user-specied pt-range 
  # particles (HepMCPRoduct) will be placed 
  # into edm::Event 
  source = FlatRandomPtGunSource 
  { 
     untracked uint32 firstRun  =  1
     untracked int32  maxEvents = 10
     untracked PSet  PGunParameters =
     {
       # you can request more than 1 particle
       #untracked vint32  PartID = { 211, 11, -13 }
       untracked vint32 PartID = {211} 
       untracked double MinEta = 1.
       untracked double MaxEta = 1.5
       #
       # phi must be given in radians
       #
       untracked double MinPhi = -3.14159265358979323846
       untracked double MaxPhi =  3.14159265358979323846
       untracked double MinPt  =  9.99
       untracked double MaxPt  = 10.01
     }
     untracked int32 Verbosity = 0 # set to 1 (or greater)  for printouts
  }

   # Vtx Smearing
   include "IOMC/EventVertexGenerators/data/VtxSmearedGauss.cfi"

   #Geometry
   include "Geometry/CMSCommonData/data/cmsSimIdealGeometryXML.cfi"
   es_module = TrackerGeometricDetESModule {}

   #Magnetic Field
   include "MagneticField/Engine/data/volumeBasedMagneticField.cfi"

   # Geant4-based CMS Detector simulation
   #
   include "SimG4Core/Application/data/g4SimHits.cfi"
  #=========================================================================================

  # SiStripDigitizer
  include "SimTracker/SiStripDigitizer/data/SiStripDigi.cfi"

  # include SiStripClusterizer
  include "RecoLocalTracker/SiStripClusterizer/data/SiStripClusterizer.cfi"

  # get SiStripFedCabling from sqlite_file
    es_source pool1 = PoolDBESSource
    {
         VPSet toGet = {
            { string record = "SiStripFedCablingRcd" string tag = "SiStripFedCabling_v1" }}

         bool loadAll = true
         string connect = "sqlite_file:sistripfedcabling.db"
         string timetype = "runnumber"
        
         PSet DBParameters = {
           untracked uint32 authenticationMethod = 1
           untracked uint32 messagelevel = 10
         }
    }

    # produce SiStripFecCabling and SiStripDetCabling out of SiStripFedCabling
    es_module sistripconn = SiStripConnectivity {}

    # DQM services
    service = DaqMonitorROOTBackEnd{}

    # tracer service - very verbose - useful for debugging only
#    service = Tracer { untracked string indention = "$$"}

    # can comment out MonitorDeamon if you want to run without DQMCollector - this should go as include in DQMServices
    include "DQM/SiStripMonitorCluster/data/MonitorDaemon.cfi"
    replace MonitorDaemon.DestinationAddress = "pccms20.cern.ch"

    # mixing module
    include "DQM/SiStripMonitorCluster/data/MixingModule.cfi"

    # SiStripMonitorDigi
    include "DQM/SiStripMonitorDigi/data/SiStripMonitorDigi_SimData.cfi"
    # use the following flag to select all detectors (e.g. for mtcc data). by default is false
#    replace SiStripMonitorDigi.SelectAllDetectors = true

    # SiStripMonitorCluster
    include "DQM/SiStripMonitorCluster/data/SiStripMonitorCluster.cfi"
    # use the following flag to select all detectors (e.g. for mtcc data). by default is false
#    replace SiStripMonitorCluster.SelectAllDetectors = true
    replace SiStripMonitorCluster.OutputMEsInRootFile = true
    replace SiStripMonitorCluster.UseCalibDataFromDB = false # this is for the noise service

# Trigger
     module trigger = MTCCHLTrigger
     {
       bool SelOnDigiCharge=false
       int32 ChargeThreshold=180 # threshold must be larger for collisions (23000 or so for 156 modules selected)
       string  ClusterProducer = "siStripClusters"
     }

# Trigger Monitoring, SiStripMonitorHLT
  include "DQM/SiStripMonitorCluster/data/SiStripMonitorHLT.cfi"

  module EventContentAnalyzer = EventContentAnalyzer {}

# prescaler module
  module Prescaler = Prescaler{ int32 prescaleFactor = 1}

################# Schedule
    # reconstruction
    path pdigitize_clusterize    = {VtxSmeared,g4SimHits,mix,siStripDigis,siStripClusters}
    # digi and cluster monitoring only the ones that pass the hlt
    path pdqm                    = {trigger,Prescaler,SiStripMonitorDigi,SiStripMonitorCluster}
    # monitor for every event the trigger decision
    path phltdqm                 = {SiStripMonitorHLT}

}
