# this cfg will run the reconstruction of:
# digis (strips+pixels), clusters (strips+pixels), rechits (strips+pixels),
# seeds, clouds, trackcandidates, tracks

process HitsToTracksMonitoring = 
{

  # MessageLogger
  include "FWCore/MessageLogger/data/MessageLogger.cfi"
 
  # magnetic field
  include "MagneticField/Engine/data/volumeBasedMagneticField.cfi"

  # geometry (switched to tracker only geometry)
  # include "Geometry/CMSCommonData/data/cmsIdealGeometryXML.cfi"

  # tracker geometry
#  include "Geometry/TrackerSimData/data/trackerSimGeometryXML.cfi"
  include "Geometry/TrackerRecoData/data/trackerRecoGeometryXML.cfi"

  # tracker geometry
  include "Geometry/TrackerGeometryBuilder/data/trackerGeometry.cfi"

  # tracker numbering
  include "Geometry/TrackerNumberingBuilder/data/trackerNumberingGeometry.cfi"

  # strip parameter estimator service for SiStripRecHitConverter
  include "RecoLocalTracker/SiStripRecHitConverter/data/StripCPEfromTrackAngle.cfi"

  #
  include "RecoLocalTracker/SiPixelRecHits/data/PixelCPEParmError.cfi"

  #TransientTrackingBuilder
  include "RecoTracker/TransientTrackingRecHit/data/TransientTrackingRecHitBuilder.cfi"

  # roads             
  include "RecoTracker/RoadMapESSource/data/RoadMapESSource.cfi"

  service = RandomNumberGeneratorService
  {
    untracked uint32 sourceSeed = 98765
  }

  # tracer service - very verbose - useful for debugging only
#  service = Tracer { untracked string indention = "$$"}

  # source of simulated hits
  source = PoolSource
  {
    untracked vstring fileNames = {"file:FlatPtSimHits.root"}
    untracked int32 maxEvents = 10
  }

  #include pixDigitizer
  include "SimTracker/SiPixelDigitizer/data/PixelDigi.cfi"

  #include  pixClusterizer
  include "RecoLocalTracker/SiPixelClusterizer/data/SiPixelClusterizer.cfi"

  #include pixRecHitConverter
  include "RecoLocalTracker/SiPixelRecHits/data/SiPixelRecHits.cfi"

  # SiStripDigitizer
  include "SimTracker/SiStripDigitizer/data/SiStripDigi.cfi"

  # include SiStripClusterizer
  include "RecoLocalTracker/SiStripClusterizer/data/SiStripClusterizer.cfi"

  # include SiStripRecHitConverter
  include "RecoLocalTracker/SiStripRecHitConverter/data/SiStripRecHitConverter.cfi"


 # GlobalPixelSeedGenerator
  include "RecoTracker/TkSeedGenerator/data/GlobalPixelSeeds.cff"

  # RoadSearchSeedFinder
  include "RecoTracker/RoadSearchSeedFinder/data/RoadSearchSeeds.cff"

  # KFTrackCandidateMaker
  include "RecoTracker/CkfPattern/data/CkfTrackCandidates.cff"

  # RoadSearchCloudMaker
  include "RecoTracker/RoadSearchCloudMaker/data/RawRoadSearchClouds.cff"

  # RoadSearchCloudMaker
  include "RecoTracker/RoadSearchCloudCleaner/data/CleanRoadSearchClouds.cff"

  # RoadSearchTrackCandidateMaker
  include "RecoTracker/RoadSearchTrackCandidateMaker/data/RoadSearchTrackCandidates.cff"

  # CTF analytical track fit
  include "RecoTracker/TrackProducer/data/CTFFinalFitAnalytical.cff"

  # CTF track fit with material
  include "RecoTracker/TrackProducer/data/CTFFinalFitWithMaterial.cff"

  # RS analytical track fit
  include "RecoTracker/TrackProducer/data/RSFinalFitAnalytical.cff"

  # RS track fit with material 
  include "RecoTracker/TrackProducer/data/RSFinalFitWithMaterial.cff"

  # RoadSearchHelixMaker
  include "RecoTracker/RoadSearchHelixMaker/data/RoadSearchDebugTracks.cff"

  module EventContentAnalyzer = EventContentAnalyzer {}

  # DQM services
  service = DaqMonitorROOTBackEnd{}

  # MonitorTrackGlobal
  include "DQM/TrackerMonitorTrack/data/MonitorTrackGlobal.cfi"
  replace MonitorTrackGlobal.TrackProducer = "rsWithMaterialTracks"

  # MonitorTrackResiduals
  include "DQM/TrackerMonitorTrack/data/MonitorTrackResiduals.cfi"
  replace MonitorTrackResiduals.OutputMEsInRootFile = true # the default setting is not to output MEs in file

  module out = PoolOutputModule 
  { 
    untracked string fileName = "test.root"
  }

  # get SiStripFedCabling from sqlite_file
    es_source pool1 = PoolDBESSource
    {
         VPSet toGet = {
            { string record = "SiStripFedCablingRcd"
              string tag = "SiStripFedCabling_v1"
            }
         }
         bool loadAll = true
         string connect = "sqlite_file:sistripfedcabling.db"
         untracked string catalog = "file:SiStripFedCablingCatalog.xml"
         string timetype = "runnumber"
         untracked uint32 authenticationMethod = 1
         untracked uint32 messagelevel = 10
    }

    # produce SiStripFecCabling and SiStripDetCabling out of SiStripFedCabling
    es_module sistripconn = SiStripConnectivity {}

#===================================================== scheduling

  sequence digi = 
  {
    siStripDigis,
    siPixelDigis
  }

  sequence localreco = 
  {
    siPixelClusters,
    siStripClusters,
    siPixelRecHits,
    siStripMatchedRecHits
  }

  sequence ckf = 
  {
    globalPixelSeeds,
    ckfTrackCandidates,
    ctfAnalyticalTracks,
    ctfWithMaterialTracks
  }

  sequence rs = 
  {
    roadSearchSeeds,
    rawRoadSearchClouds,
    cleanRoadSsearchClouds,
    rsTrackCandidates,
    rsAnalyticalTracks,
    rsWithMaterialTracks,
    RoadSearchDebugTracks
  }

  sequence monitor =
  {
    MonitorTrackGlobal,
    MonitorTrackResiduals
  }

    path p = 
    {
      digi,
      localreco,
      ckf,
      rs,
#      EventContentAnalyzer,                  // show objects/collections in the event - verbose
      monitor
    }

#  endpath e = { out }
}

